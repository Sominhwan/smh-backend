<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.smh.module.noticeBoard.dao.NoticeBoardDAO">
	<!-- 공지사항 글쓰기 -->
	<insert id="noticeBoardInsert" parameterType="kr.co.smh.module.noticeBoard.dao.NoticeBoardDAO">
		INSERT INTO notice_board(
			user_id,
			title,
			writer,
			content,
			views_count,
			like_count,
			comment_count,
			create_at,
			del_yn
		)
		VALUES(
			#{userId},
			#{title},
			#{writer},
			#{content},
			0,
			0,
			0,
			NOW(),
			'N'
		)
	</insert>
	<!-- 글 가져오기 -->
	<select id="boardCotent" resultType="kr.co.smh.module.noticeBoard.model.NoticeBoardVO">
		<if test='category == "공지사항"'>
			<![CDATA[
				select title, content
				from notice_board 
				where notice_id = #{noticeId} and user_id = #{userId}		
			]]>
		</if>
		<if test='category == "자유게시판"'>
			<![CDATA[
			]]>
		</if>
		<if test='category == "주요소식"'>
			<![CDATA[
			]]>
		</if>
	</select>
	<!-- 공지사항 글 목록 -->
	<select id="noticeBoardList" resultType="kr.co.smh.module.noticeBoard.model.NoticeBoardVO">
		SELECT notice_id, title, views_count, like_count, comment_count, writer, TO_CHAR(create_at,'YYYY.MM.DD HH24:MI') as create_at
		FROM notice_board
	    WHERE del_yn = 'N'
		<if test='category == "최신글순"'>
		ORDER BY notice_id DESC
		</if>
		<if test='category == "많은댓글순"'>
		ORDER BY comment_count DESC
		</if>
		<if test='category == "좋아요순"'>
		ORDER BY like_count DESC
		</if>
		OFFSET #{offset} ROWS
		FETCH NEXT #{rowSize} ROWS ONLY;
	</select>
	<!-- 공지사항 전체페이지 개수 -->
	<select id="noticeBoardTotalPage" resultType="Integer">
	    SELECT CEIL(COUNT(*)/15.0) 
      	FROM notice_board  
	</select>
	<!-- 공지사항 상세페이지 정보 -->
	<select id="noticeBoardDetail" resultType="kr.co.smh.module.noticeBoard.model.NoticeBoardVO">
		<if test='userId != null'>
			<![CDATA[
				select nb.user_id,
					   nb.title, 
					   nb.writer, 
					   nb.content, 
					   nb.like_count, 
					   nbl.like_check, 
					   nb.comment_count, 
					   to_char(nb.create_at,'YYYY.MM.DD HH24:MI') as create_at
				from notice_board nb
				left join notice_board_like nbl on nbl.notice_id = #{noticeId} and nbl.user_id = #{userId}
				where nb.notice_id = #{noticeId}
			]]>
		</if>
		<if test='userId == null'>
			<![CDATA[
				select nb.user_id,
					   nb.title, 
					   nb.writer, 
					   nb.content, 
					   nb.like_count, 
					   nb.comment_count, 
					   to_char(nb.create_at,'YYYY.MM.DD HH24:MI') as create_at
				from notice_board nb
				where nb.notice_id = #{noticeId}
			]]>
		</if>		
	</select>
	<!-- 공지사항 상세페이지 삭제하기 -->
	<update id="deleteNoticeBoardDetail">
		<![CDATA[
			update notice_board_comment
			set del_yn = 'Y',
			    delete_at = now()
			where notice_id = #{noticeId};
			
			update notice_board 
			set del_yn = 'Y',
			    delete_at = now()
			where notice_id = #{noticeId} and user_id = #{userId};	
		]]>
	</update>
	<!-- 공지사항 댓글 가져오기 -->
	<select id="noticeBoardCommentList" resultType="kr.co.smh.module.noticeBoard.dto.NoticeBoardCommentDTO">
		<![CDATA[
			select nbc.notice_comment_id, nbc.notice_id, nbc.user_id, ui.nickname, nbc.comment, to_char(nbc.create_at, 'YYYY.MM.DD') as create_at, ui.profile_url
			from notice_board_comment nbc
			left join user_info ui on ui.user_id = nbc.user_id
			where nbc.notice_id = #{noticeId} and nbc.del_yn = 'N'
			order by nbc.create_at desc
		]]>
	</select>
	<!-- 공지사항 댓글 작성 -->
	<select id="noticeBoardComment" parameterType="kr.co.smh.module.noticeBoard.model.NoticeBoardCommentVO">
		<![CDATA[	
			insert into notice_board_comment(
				notice_id,
				user_id,
				comment,
				create_at,
				del_yn
			)
			values(
				#{noticeId},
				#{userId},
				#{comment},
				now(),
				'N'
			);
			update notice_board
			set comment_count = comment_count + 1
			where notice_id = #{noticeId};	
		]]>
	</select>
	<!-- 공지사항 댓글 수정 -->
	<update id="updateNoticeBoardComment">
		<![CDATA[
			update notice_board_comment
			set comment = #{comment},
				update_at = now()
			where notice_comment_id = #{noticeCommentId}
			  and notice_id = #{noticeId}
			  and user_id = #{userId}
		]]>
	</update>
	<!-- 공지사항 댓글 삭제하기 -->
	<update id="deleteNoticeBoardComment">
		<![CDATA[
			update notice_board
			set comment_count = comment_count -1
			where notice_id = #{noticeId};	
			
			update notice_board_comment
			set del_yn = 'Y',
				delete_at = now()
			where notice_comment_id = #{noticeCommentId}
		]]>
	</update>
	<!-- 공지사항 좋아요 활성화 -->
	<select id="likeNoticeBoard" resultType="int">
		<![CDATA[
			insert into notice_board_like(
				notice_id,
				user_id,
				like_check	
			)
			values(
				#{noticeId},
				#{userId},
				true	
			);
			update notice_board
			set like_count = like_count + 1
			where notice_id = #{noticeId}
			returning like_count;
		]]>
	</select>
	<!-- 공지사항 좋아요 비활성화 -->
	<select id="unlikeNoticeBoard" resultType="int">
		<![CDATA[
			delete from notice_board_like
			where notice_id = #{noticeId}
			  and user_id = #{userId};
			  
			update notice_board
			set like_count = like_count - 1
			where notice_id = #{noticeId}
			returning like_count;
		]]>
	</select>	
</mapper>